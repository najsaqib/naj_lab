---
title: "Using multiple programming languages to analyze Asbestos in Government offices"
author: "Najmus Saqib"
Date: "2023-05-18"
format: html
editor: visual
---

## Multiple Languages in Quarto

Quarto is an evolution of R-Markdown. Alongside various other improvements, one of the biggest new features is expanded **support for multiple programming languages**. This is very useful as you can use each language for tasks that they excel in. Additionally, this is also useful in situations where multiple analysts are working together but there is no overlap in the languages they know. In this document, we will use **R, Python and Observable JavaScript** to conduct our analysis.

## Analysis of Government Offices with Asbestos

The Government of Canada's Open Data Portal contains data sets from across the public service. One of the more interesting data sets is published by **Public Services and Procurement Canada (PSPC)**, which contains data on whether **asbestos** exist on the properties owned or leased by PSPC ([Link here](https://open.canada.ca/data/en/dataset/114ea992-a491-4ba2-8bc5-78126ca8af05 "Open Government")). Let's start this analysis by importing this data in R:

```{r}
#| message: false

library(readr)

asbestos_raw <- read_csv("https://github.com/najsaqib/naj_lab/raw/main/asbestos.csv")

ojs_define(asbestos_raw_js = asbestos_raw) # this passes a dataframe onto Javascript
```

## Using JavaScript for exploratory data analysis

After importing the data set, let's explore this a bit further. While R is perfectly capable of doing exploratory data analysis, lets use Observable Javascript here. Quarto includes native support for [Observable JS](https://observablehq.com/@observablehq/observables-not-javascript), a set of enhancements to vanilla JavaScript created by [Mike Bostock](https://en.wikipedia.org/wiki/Mike_Bostock) (also the author of [D3](https://d3js.org/)). Observable JS is distinguished by its [reactive runtime](https://github.com/observablehq/runtime), which is especially well suited for interactive data exploration and analysis.

First, lets explore the full data in tabular format.

```{ojs}
viewof table = Inputs.table(asbestos_js)
```

The above table provides an easy and interactive way of peeking at the data table within the notebook. Now, lets **create an interactive/reactive** data visualization to further explore the data.

```{ojs}
// The code below creates a radio button that will capture user input
viewof pickType = Inputs.radio(
  asbestos_js.map((d) => d.type),
  {label: "Choose ownership type", value: "Lease", unique: true }
)
```

```{ojs}
Plot.plot({
  marks: [
    Plot.barX(
      asbestos_js.filter(d => d.type === pickType), // input is captured
      Plot.groupY(
        { x: "count"},
        {
          x: "id",
          y: "prcode",
          fill: "asbestos",
          sort: { y: "x", reverse: true }
        }
      )
    )
  ],
  color: {legend: true},
  })

```

The first code chunk above generates a radio button that allows users to filter the data based on the ownership type of the facility. In the second code chunk above, this user input is passed onto the code for the Observable Plot, which **reacts in real-time** to the user selection.

```{ojs}
asbestos_js = transpose(asbestos_raw_js) // this converts rectangular data into an array, which is the way JavaScript visualizations prefer their inputs 
```

An interesting thing to note is that **JavaScript code is executed topologically**, as opposed to chronologically. While for R, a variable would need to be declared in the Quarto notebook before it can be called, for JavaScript an object can be defined anywhere in the namespace and called anywhere else. This is illustrated above where the `asbestos` object (which is a transpose of the data frame imported from R) is defined after the code chunks where the `asbestos` object is called.

## Leveraging Python for modelling

Once we have explored the data, we can start to leverage Python within our workflow. One of the main advantages of Python over R lies with its **more mature machine learning** and deep learning ecosystem. Examples include [PyTorch](https://pytorch.org/), [TensorFlow](https://www.tensorflow.org/), etc. There are a few R libraries that allow users to leverage them as well, but they essentially act as wrappers for Python packages. For this example, we will use [`scikit-learn`](https://scikit-learn.org/stable/) to carry out an overly simple logistic regression.

```{python}
#| warning: false
#| error: false

import pandas as pd
from sklearn.linear_model import LogisticRegression

asbestos_py = r.asbestos_raw # this imports the dataframe from R to Python

# shape the data to enable logistic regression
data = asbestos_py
data = pd.DataFrame.from_dict(data)
data = pd.concat((data,
  pd.get_dummies(data['type'], drop_first=True)), axis=1)
data = pd.concat((data,
  pd.get_dummies(data['asbestos'], drop_first=True)), axis=1)
data['intercept'] = 1.0

# define the x and y variables for the regression
xtrain = data[['intercept','Lease']]
ytrain = data[['Yes']]

# train the model
model_logit = LogisticRegression(random_state=0).fit(xtrain, ytrain.values.ravel())

# save the results
result = (model_logit.intercept_, model_logit.coef_, model_logit.score(xtrain, ytrain))

```

## Finishing up the analysis in R

After leveraging Javascript and Python for parts of the analysis that we deemed more fit for purpose, we can wrap everything up back in R. Just like one can **pass data from R to Python, the reverse is also true,** and the code chunk below illustrates that:

```{r}
library(reticulate)
output <- py$result
```

Once we have imported the results of the model back into R, we can do everything with it that we would be able to do with a native R data frame. In this instance, we will simply incorporate the results of the logistic regression into the narrative of the document via the `in-line code` ability of Quarto:

> The log odds for government owned buildings (i.e. facilities that are not leased and have a `Lease` value of `0`) is `r round(output[[1]], digits = 4)` and based on the estimated coefficient for the `Lease` variable, the odds ratio for leased buildings is `r round(exp(output[[2]][[2]]), digits = 4)`, meaning that government owned facilities are **`r paste(round(100*(exp(output[[2]][[2]])), digits = 2), "%")` more likely to contain asbestos** compared to leased buildings.

## Wrapping up the exercise

While the much publicized support for R, Python and JavaScript (not to mention **Julia**; perhaps a topic for another day) in Quarto is intriguing, the resultant multilingual workflow is currently not fully mature. With regards to this analysis of asbestos data, I would prefer to do the whole notebook in R only. Here are some of the **downsides of the multilingual approach** as of this moment:

1.  While it is possible to pass on data between R and Python, and from R/Python to Observable JavaScript (OJS), it does not seem possible to **pass data in-memory from OJS to R/Python**.

2.  **OJS code chunks in QMD cannot be executed interactively**. The user has to render the full notebook from RStudio for OJS code to execute.

3.  Rendered notebooks containing OJS code chunks are served as a web page from RStudio. Otherwise, **OJS components are not rendered if the HTML file is opened/shared normally without a web server**.

4.  While Python and R data frames can be passed in between the two languages quite seamlessly, **certain special types of data frames are not read properly** (i.e. Geo Data Frame object).

5.  Troubleshooting issues pertaining to Python and JavaScript can be quite challenging if you are not already familiar with the process, especially since the issues might be specific to Quarto and not related to the languages at large.

It is perhaps due to **increasing maturity of R** as a well-supported language that incorporating other languages in an analtyical notebook currently seems not worth the added effort. With that said, even as it stands, incorporating Python can be beneficial (e.g. certain type of data visualizations not supported by `ggplot`, modelling with `scikit-learn` , importing certain types of data files more efficiently, enabling better collaboration between analysts who are proficient in one of th e two languages, etc.).

Moreover, while leveraging JavaScript in Quarto introduces a new set of issues, **development in Quarto is underway that is meant to address these shortcomings**. Even as it stands right now, OJS allows users to create a reactive application in a much simpler way than Shiny. Additionally, writing more code in JavaScript can potentially improve collaboration with web teams such as **Health Infobase**.

Lastly, similar to R, both **Python and JavaScript have a healthy development community**, hence being able to remain attached to those ecosystems enables R users to continue producing cutting edge analysis and benefit from innovative developments elsewhere.
